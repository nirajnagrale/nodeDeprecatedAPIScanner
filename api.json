{
    "modules": [
        {
            "name": "dep0001:_`http.outgoingmessage.prototype.flush`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>OutgoingMessage.prototype.flush()</code> has been removed. Use\n<code>OutgoingMessage.prototype.flushHeaders()</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0001: `http.OutgoingMessage.prototype.flush`",
            "apiType": "End-of-Life",
            "api": "http.OutgoingMessage.prototype.flush"
        },
        {
            "name": "dep0002:_`require('_linklist')`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>_linklist</code> module is deprecated. Please use a userland alternative.</p>",
            "type": "module",
            "displayName": "DEP0002: `require('_linklist')`",
            "apiType": "End-of-Life",
            "api": "require('_linklist')"
        },
        {
            "name": "dep0003:_`_writablestate.buffer`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>_writableState.buffer</code> has been removed. Use <code>_writableState.getBuffer()</code>\ninstead.</p>",
            "type": "module",
            "displayName": "DEP0003: `_writableState.buffer`",
            "apiType": "End-of-Life",
            "api": "_writableState.buffer"
        },
        {
            "name": "dep0004:_`cryptostream.prototype.readystate`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>CryptoStream.prototype.readyState</code> property was removed.</p>",
            "type": "module",
            "displayName": "DEP0004: `CryptoStream.prototype.readyState`",
            "apiType": "End-of-Life",
            "api": "CryptoStream.prototype.readyState"
        },
        {
            "name": "dep0005:_`buffer()`_constructor",
            "desc": "<p>Type: Runtime (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>The <code>Buffer()</code> function and <code>new Buffer()</code> constructor are deprecated due to\nAPI usability issues that can lead to accidental security issues.</p>\n<p>As an alternative, use one of the following methods of constructing <code>Buffer</code>\nobjects:</p>\n<ul>\n<li><a href=\"buffer.html#static-method-bufferallocsize-fill-encoding\"><code>Buffer.alloc(size[, fill[, encoding]])</code></a>: Create a <code>Buffer</code> with\n<em>initialized</em> memory.</li>\n<li><a href=\"buffer.html#static-method-bufferallocunsafesize\"><code>Buffer.allocUnsafe(size)</code></a>: Create a <code>Buffer</code> with\n<em>uninitialized</em> memory.</li>\n<li><a href=\"buffer.html#static-method-bufferallocunsafeslowsize\"><code>Buffer.allocUnsafeSlow(size)</code></a>: Create a <code>Buffer</code> with <em>uninitialized</em>\nmemory.</li>\n<li><a href=\"buffer.html#static-method-bufferfromarray\"><code>Buffer.from(array)</code></a>: Create a <code>Buffer</code> with a copy of <code>array</code></li>\n<li><a href=\"buffer.html#static-method-bufferfromarraybuffer-byteoffset-length\"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a> -\nCreate a <code>Buffer</code> that wraps the given <code>arrayBuffer</code>.</li>\n<li><a href=\"buffer.html#static-method-bufferfrombuffer\"><code>Buffer.from(buffer)</code></a>: Create a <code>Buffer</code> that copies <code>buffer</code>.</li>\n<li><a href=\"buffer.html#static-method-bufferfromstring-encoding\"><code>Buffer.from(string[, encoding])</code></a>: Create a <code>Buffer</code>\nthat copies <code>string</code>.</li>\n</ul>\n<p>Without <code>--pending-deprecation</code>, runtime warnings occur only for code not in\n<code>node_modules</code>. This means there will not be deprecation warnings for\n<code>Buffer()</code> usage in dependencies. With <code>--pending-deprecation</code>, a runtime\nwarning results no matter where the <code>Buffer()</code> usage occurs.</p>",
            "type": "module",
            "displayName": "DEP0005: `Buffer()` constructor",
            "apiType": "Runtime deprecaton",
            "api": "Buffer()"
        },
        {
            "name": "dep0006:_`child_process`_`options.customfds`",
            "desc": "<p>Type: End-of-Life</p>\n<p>Within the <a href=\"child_process.html\"><code>child_process</code></a> module's <code>spawn()</code>, <code>fork()</code>, and <code>exec()</code>\nmethods, the <code>options.customFds</code> option is deprecated. The <code>options.stdio</code>\noption should be used instead.</p>",
            "type": "module",
            "displayName": "DEP0006: `child_process` `options.customFds`",
            "apiType": "End-of-Life",
            "api": "child_process` `options.customFds"
        },
        {
            "name": "dep0007:_replace_`cluster`_`worker.suicide`_with_`worker.exitedafterdisconnect`",
            "desc": "<p>Type: End-of-Life</p>\n<p>In an earlier version of the Node.js <code>cluster</code>, a boolean property with the name\n<code>suicide</code> was added to the <code>Worker</code> object. The intent of this property was to\nprovide an indication of how and why the <code>Worker</code> instance exited. In Node.js\n6.0.0, the old property was deprecated and replaced with a new\n<a href=\"cluster.html#workerexitedafterdisconnect\"><code>worker.exitedAfterDisconnect</code></a> property. The old property name did not\nprecisely describe the actual semantics and was unnecessarily emotion-laden.</p>",
            "type": "module",
            "displayName": "DEP0007: Replace `cluster` `worker.suicide` with `worker.exitedAfterDisconnect`",
            "apiType": "End-of-Life",
            "api": "cluster` `worker.suicide` with `worker.exitedAfterDisconnect"
        },
        {
            "name": "dep0008:_`require('node:constants')`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <code>node:constants</code> module is deprecated. When requiring access to constants\nrelevant to specific Node.js builtin modules, developers should instead refer\nto the <code>constants</code> property exposed by the relevant module. For instance,\n<code>require('node:fs').constants</code> and <code>require('node:os').constants</code>.</p>",
            "type": "module",
            "displayName": "DEP0008: `require('node:constants')`",
            "apiType": "Documentation-only deprecation",
            "api": "require(node:constants)"
        },
        {
            "name": "dep0009:_`crypto.pbkdf2`_without_digest",
            "desc": "<p>Type: End-of-Life</p>\n<p>Use of the <a href=\"crypto.html#cryptopbkdf2password-salt-iterations-keylen-digest-callback\"><code>crypto.pbkdf2()</code></a> API without specifying a digest was deprecated\nin Node.js 6.0 because the method defaulted to using the non-recommended\n<code>'SHA1'</code> digest. Previously, a deprecation warning was printed. Starting in\nNode.js 8.0.0, calling <code>crypto.pbkdf2()</code> or <code>crypto.pbkdf2Sync()</code> with\n<code>digest</code> set to <code>undefined</code> will throw a <code>TypeError</code>.</p>\n<p>Beginning in Node.js v11.0.0, calling these functions with <code>digest</code> set to\n<code>null</code> would print a deprecation warning to align with the behavior when <code>digest</code>\nis <code>undefined</code>.</p>\n<p>Now, however, passing either <code>undefined</code> or <code>null</code> will throw a <code>TypeError</code>.</p>",
            "type": "module",
            "displayName": "DEP0009: `crypto.pbkdf2` without digest",
            "apiType": "End-of-Life",
            "api": "crypto.pbkdf2"
        },
        {
            "name": "dep0010:_`crypto.createcredentials`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>crypto.createCredentials()</code> API was removed. Please use\n<a href=\"tls.html#tlscreatesecurecontextoptions\"><code>tls.createSecureContext()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0010: `crypto.createCredentials`",
            "apiType": "End-of-Life",
            "api": "crypto.createCredentials"
        },
        {
            "name": "dep0011:_`crypto.credentials`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>crypto.Credentials</code> class was removed. Please use <a href=\"tls.html#tlscreatesecurecontextoptions\"><code>tls.SecureContext</code></a>\ninstead.</p>",
            "type": "module",
            "displayName": "DEP0011: `crypto.Credentials`",
            "apiType": "End-of-Life",
            "api": "crypto.Credentials"
        },
        {
            "name": "dep0012:_`domain.dispose`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>Domain.dispose()</code> has been removed. Recover from failed I/O actions\nexplicitly via error event handlers set on the domain instead.</p>",
            "type": "module",
            "displayName": "DEP0012: `Domain.dispose`",
            "apiType": "End-of-Life",
            "api": "Domain.dispose"
        },
        {
            "name": "dep0013:_`fs`_asynchronous_function_without_callback",
            "desc": "<p>Type: End-of-Life</p>\n<p>Calling an asynchronous function without a callback throws a <code>TypeError</code>\nin Node.js 10.0.0 onwards. See <a href=\"https://github.com/nodejs/node/pull/12562\">https://github.com/nodejs/node/pull/12562</a>.</p>",
            "type": "module",
            "displayName": "DEP0013: `fs` asynchronous function without callback",
            "apiType": "End-of-Life",
            "api": "fs"
        },
        {
            "name": "dep0014:_`fs.read`_legacy_string_interface",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <a href=\"fs.html#fsreadfd-buffer-offset-length-position-callback\"><code>fs.read()</code></a> legacy <code>String</code> interface is deprecated. Use the <code>Buffer</code>\nAPI as mentioned in the documentation instead.</p>",
            "type": "module",
            "displayName": "DEP0014: `fs.read` legacy String interface",
            "apiType": "End-of-Life",
            "api": "fs.read"
        },
        {
            "name": "dep0015:_`fs.readsync`_legacy_string_interface",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <a href=\"fs.html#fsreadsyncfd-buffer-offset-length-position\"><code>fs.readSync()</code></a> legacy <code>String</code> interface is deprecated. Use the\n<code>Buffer</code> API as mentioned in the documentation instead.</p>",
            "type": "module",
            "displayName": "DEP0015: `fs.readSync` legacy String interface",
            "apiType": "End-of-Life",
            "api": "fs.readSync"
        },
        {
            "name": "dep0016:_`global`/`root`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>GLOBAL</code> and <code>root</code> aliases for the <code>global</code> property were deprecated\nin Node.js 6.0.0 and have since been removed.</p>",
            "type": "module",
            "displayName": "DEP0016: `GLOBAL`/`root`",
            "apiType": "End-of-Life",
            "api": "GLOBAL`/`root"
        },
        {
            "name": "dep0017:_`intl.v8breakiterator`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>Intl.v8BreakIterator</code> was a non-standard extension and has been removed.\nSee <a href=\"https://github.com/tc39/proposal-intl-segmenter\"><code>Intl.Segmenter</code></a>.</p>",
            "type": "module",
            "displayName": "DEP0017: `Intl.v8BreakIterator`",
            "apiType": "End-of-Life",
            "api": "Intl.v8BreakIterator"
        },
        {
            "name": "dep0018:_unhandled_promise_rejections",
            "desc": "<p>Type: End-of-Life</p>\n<p>Unhandled promise rejections are deprecated. By default, promise rejections\nthat are not handled terminate the Node.js process with a non-zero exit\ncode. To change the way Node.js treats unhandled rejections, use the\n<a href=\"cli.html#--unhandled-rejectionsmode\"><code>--unhandled-rejections</code></a> command-line option.</p>",
            "type": "module",
            "displayName": "DEP0018: Unhandled promise rejections",
            "apiType": "End-of-Life",
            "api": "DEP0018: Unhandled promise rejection"
        },
        {
            "name": "dep0019:_`require('.')`_resolved_outside_directory",
            "desc": "<p>Type: End-of-Life</p>\n<p>In certain cases, <code>require('.')</code> could resolve outside the package directory.\nThis behavior has been removed.</p>",
            "type": "module",
            "displayName": "DEP0019: `require('.')` resolved outside directory",
            "apiType": "End-of-Life",
            "api": "require('.')"
        },
        {
            "name": "dep0020:_`server.connections`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>Server.connections</code> property was deprecated in Node.js v0.9.7 and has\nbeen removed. Please use the <a href=\"net.html#servergetconnectionscallback\"><code>Server.getConnections()</code></a> method instead.</p>",
            "type": "module",
            "displayName": "DEP0020: `Server.connections`",
            "apiType": "End-of-Life",
            "api": "Server.connections"
        },
        {
            "name": "dep0021:_`server.listenfd`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>Server.listenFD()</code> method was deprecated and removed. Please use\n<a href=\"net.html#serverlistenhandle-backlog-callback\"><code>Server.listen({fd: &#x3C;number>})</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0021: `Server.listenFD`",
            "apiType": "End-of-Life",
            "api": "Server.listenFD"
        },
        {
            "name": "dep0022:_`os.tmpdir()`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>os.tmpDir()</code> API was deprecated in Node.js 7.0.0 and has since been\nremoved. Please use <a href=\"os.html#ostmpdir\"><code>os.tmpdir()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0022: `os.tmpDir()`",
            "apiType": "End-of-Life",
            "api": "os.tmpDir()"
        },
        {
            "name": "dep0023:_`os.getnetworkinterfaces()`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>os.getNetworkInterfaces()</code> method is deprecated. Please use the\n<a href=\"os.html#osnetworkinterfaces\"><code>os.networkInterfaces()</code></a> method instead.</p>",
            "type": "module",
            "displayName": "DEP0023: `os.getNetworkInterfaces()`",
            "apiType": "End-of-Life",
            "api": "os.getNetworkInterfaces()"
        },
        {
            "name": "dep0024:_`replserver.prototype.converttocontext()`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>REPLServer.prototype.convertToContext()</code> API has been removed.</p>",
            "type": "module",
            "displayName": "DEP0024: `REPLServer.prototype.convertToContext()`",
            "apiType": "End-of-Life",
            "api": "REPLServer.prototype.convertToContext()"
        },
        {
            "name": "dep0025:_`require('node:sys')`",
            "desc": "<p>Type: Runtime</p>\n<p>The <code>node:sys</code> module is deprecated. Please use the <a href=\"util.html\"><code>util</code></a> module instead.</p>",
            "type": "module",
            "displayName": "DEP0025: `require('node:sys')`",
            "apiType": "Runtime deprecaton",
            "api": "require('node:sys')"
        },
        {
            "name": "dep0026:_`util.print()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>util.print()</code> has been removed. Please use <a href=\"console.html#consolelogdata-args\"><code>console.log()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0026: `util.print()`",
            "apiType": "End-of-Life",
            "api": "util.print()"
        },
        {
            "name": "dep0027:_`util.puts()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>util.puts()</code> has been removed. Please use <a href=\"console.html#consolelogdata-args\"><code>console.log()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0027: `util.puts()`",
            "apiType": "End-of-Life",
            "api": "util.puts()"
        },
        {
            "name": "dep0028:_`util.debug()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>util.debug()</code> has been removed. Please use <a href=\"console.html#consoleerrordata-args\"><code>console.error()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0028: `util.debug()`",
            "apiType": "End-of-Life",
            "api": "util.debug()"
        },
        {
            "name": "dep0029:_`util.error()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>util.error()</code> has been removed. Please use <a href=\"console.html#consoleerrordata-args\"><code>console.error()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0029: `util.error()`",
            "apiType": "End-of-Life",
            "api": "util.error()"
        },
        {
            "name": "dep0030:_`slowbuffer`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"buffer.html#class-slowbuffer\"><code>SlowBuffer</code></a> class is deprecated. Please use\n<a href=\"buffer.html#static-method-bufferallocunsafeslowsize\"><code>Buffer.allocUnsafeSlow(size)</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0030: `SlowBuffer`",
            "apiType": "Documentation-only deprecation",
            "api": "SlowBuffer"
        },
        {
            "name": "dep0031:_`ecdh.setpublickey()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"crypto.html#ecdhsetpublickeypublickey-encoding\"><code>ecdh.setPublicKey()</code></a> method is now deprecated as its inclusion in the\nAPI is not useful.</p>",
            "type": "module",
            "displayName": "DEP0031: `ecdh.setPublicKey()`",
            "apiType": "Documentation-only deprecation",
            "api": "ecdh.setPublicKey()"
        },
        {
            "name": "dep0032:_`node:domain`_module",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"domain.html\"><code>domain</code></a> module is deprecated and should not be used.</p>",
            "type": "module",
            "displayName": "DEP0032: `node:domain` module",
            "apiType": "Documentation-only deprecation",
            "api": "node:domain"
        },
        {
            "name": "dep0033:_`eventemitter.listenercount()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"events.html#eventslistenercountemitter-eventname\"><code>events.listenerCount(emitter, eventName)</code></a> API is\ndeprecated. Please use <a href=\"events.html#emitterlistenercounteventname-listener\"><code>emitter.listenerCount(eventName)</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0033: `EventEmitter.listenerCount()`",
            "apiType": "Documentation-only deprecation",
            "api": "EventEmitter.listenerCount()"
        },
        {
            "name": "dep0034:_`fs.exists(path,_callback)`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fsexistspath-callback\"><code>fs.exists(path, callback)</code></a> API is deprecated. Please use\n<a href=\"fs.html#fsstatpath-options-callback\"><code>fs.stat()</code></a> or <a href=\"fs.html#fsaccesspath-mode-callback\"><code>fs.access()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0034: `fs.exists(path, callback)`",
            "apiType": "Documentation-only deprecation",
            "api": "fs.exists(path, callback)"
        },
        {
            "name": "dep0035:_`fs.lchmod(path,_mode,_callback)`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fslchmodpath-mode-callback\"><code>fs.lchmod(path, mode, callback)</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0035: `fs.lchmod(path, mode, callback)`",
            "apiType": "Documentation-only deprecation",
            "api": "fs.lchmod(path, mode, callback)"
        },
        {
            "name": "dep0036:_`fs.lchmodsync(path,_mode)`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fslchmodsyncpath-mode\"><code>fs.lchmodSync(path, mode)</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0036: `fs.lchmodSync(path, mode)`",
            "apiType": "Documentation-only deprecation",
            "api": "fs.lchmodSync(path, mode)"
        },
        {
            "name": "dep0037:_`fs.lchown(path,_uid,_gid,_callback)`",
            "desc": "<p>Type: Deprecation revoked</p>\n<p>The <a href=\"fs.html#fslchownpath-uid-gid-callback\"><code>fs.lchown(path, uid, gid, callback)</code></a> API was deprecated. The\ndeprecation was revoked because the requisite supporting APIs were added in\nlibuv.</p>",
            "type": "module",
            "displayName": "DEP0037: `fs.lchown(path, uid, gid, callback)`",
            "api": "fs.lchown(path, uid, gid, callback)"
        },
        {
            "name": "dep0038:_`fs.lchownsync(path,_uid,_gid)`",
            "desc": "<p>Type: Deprecation revoked</p>\n<p>The <a href=\"fs.html#fslchownsyncpath-uid-gid\"><code>fs.lchownSync(path, uid, gid)</code></a> API was deprecated. The deprecation was\nrevoked because the requisite supporting APIs were added in libuv.</p>",
            "type": "module",
            "displayName": "DEP0038: `fs.lchownSync(path, uid, gid)`",
            "api": "fs.lchownSync(path, uid, gid)"
        },
        {
            "name": "dep0039:_`require.extensions`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"modules.html#requireextensions\"><code>require.extensions</code></a> property is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0039: `require.extensions`",
            "apiType": "Documentation-only deprecation",
            "api": "require.extensions"
        },
        {
            "name": "dep0040:_`node:punycode`_module",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>The <a href=\"punycode.html\"><code>punycode</code></a> module is deprecated. Please use a userland alternative\ninstead.</p>",
            "type": "module",
            "displayName": "DEP0040: `node:punycode` module",
            "apiType": "Documentation-only deprecation",
            "api": "node:punycode"
        },
        {
            "name": "dep0041:_`node_repl_history_file`_environment_variable",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>NODE_REPL_HISTORY_FILE</code> environment variable was removed. Please use\n<code>NODE_REPL_HISTORY</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0041: `NODE_REPL_HISTORY_FILE` environment variable",
            "apiType": "End-of-Life",
            "api": "NODE_REPL_HISTORY_FILE"
        },
        {
            "name": "dep0042:_`tls.cryptostream`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <a href=\"tls.html#class-tlscryptostream\"><code>tls.CryptoStream</code></a> class was removed. Please use\n<a href=\"tls.html#class-tlstlssocket\"><code>tls.TLSSocket</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0042: `tls.CryptoStream`",
            "apiType": "End-of-Life",
            "api": "tls.CryptoStream"
        },
        {
            "name": "dep0043:_`tls.securepair`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"tls.html#class-tlssecurepair\"><code>tls.SecurePair</code></a> class is deprecated. Please use\n<a href=\"tls.html#class-tlstlssocket\"><code>tls.TLSSocket</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0043: `tls.SecurePair`",
            "apiType": "Documentation-only deprecation",
            "api": "tls.SecurePair"
        },
        {
            "name": "dep0044:_`util.isarray()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisarrayobject\"><code>util.isArray()</code></a> API is deprecated. Please use <code>Array.isArray()</code>\ninstead.</p>",
            "type": "module",
            "displayName": "DEP0044: `util.isArray()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isArray()"
        },
        {
            "name": "dep0045:_`util.isboolean()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisbooleanobject\"><code>util.isBoolean()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0045: `util.isBoolean()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isBoolean()"
        },
        {
            "name": "dep0046:_`util.isbuffer()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisbufferobject\"><code>util.isBuffer()</code></a> API is deprecated. Please use\n<a href=\"buffer.html#static-method-bufferisbufferobj\"><code>Buffer.isBuffer()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0046: `util.isBuffer()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isBuffer()"
        },
        {
            "name": "dep0047:_`util.isdate()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisdateobject\"><code>util.isDate()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0047: `util.isDate()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isDate()"
        },
        {
            "name": "dep0048:_`util.iserror()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utiliserrorobject\"><code>util.isError()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0048: `util.isError()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isError()"
        },
        {
            "name": "dep0049:_`util.isfunction()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisfunctionobject\"><code>util.isFunction()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0049: `util.isFunction()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isFunction()"
        },
        {
            "name": "dep0050:_`util.isnull()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisnullobject\"><code>util.isNull()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0050: `util.isNull()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isNull()"
        },
        {
            "name": "dep0051:_`util.isnullorundefined()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisnullorundefinedobject\"><code>util.isNullOrUndefined()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0051: `util.isNullOrUndefined()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isNullOrUndefined()"
        },
        {
            "name": "dep0052:_`util.isnumber()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisnumberobject\"><code>util.isNumber()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0052: `util.isNumber()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isNumber()"
        },
        {
            "name": "dep0053:_`util.isobject()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisobjectobject\"><code>util.isObject()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0053: `util.isObject()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isObject()"
        },
        {
            "name": "dep0054:_`util.isprimitive()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisprimitiveobject\"><code>util.isPrimitive()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0054: `util.isPrimitive()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isPrimitive()"
        },
        {
            "name": "dep0055:_`util.isregexp()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisregexpobject\"><code>util.isRegExp()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0055: `util.isRegExp()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isRegExp()"
        },
        {
            "name": "dep0056:_`util.isstring()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisstringobject\"><code>util.isString()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0056: `util.isString()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isString()"
        },
        {
            "name": "dep0057:_`util.issymbol()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilissymbolobject\"><code>util.isSymbol()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0057: `util.isSymbol()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isSymbol()"
        },
        {
            "name": "dep0058:_`util.isundefined()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utilisundefinedobject\"><code>util.isUndefined()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0058: `util.isUndefined()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.isUndefined()"
        },
        {
            "name": "dep0059:_`util.log()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#utillogstring\"><code>util.log()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0059: `util.log()`",
            "apiType": "Documentation-only deprecation",
            "api": "util.log()"
        },
        {
            "name": "dep0060:_`util._extend()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_extendtarget-source\"><code>util._extend()</code></a> API is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0060: `util._extend()`",
            "apiType": "Documentation-only deprecation",
            "api": "util._extend()"
        },
        {
            "name": "dep0061:_`fs.syncwritestream`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>fs.SyncWriteStream</code> class was never intended to be a publicly accessible\nAPI and has been removed. No alternative API is available. Please use a userland\nalternative.</p>",
            "type": "module",
            "displayName": "DEP0061: `fs.SyncWriteStream`",
            "apiType": "End-of-Life",
            "api": "fs.SyncWriteStream"
        },
        {
            "name": "dep0062:_`node_--debug`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>--debug</code> activates the legacy V8 debugger interface, which was removed as\nof V8 5.8. It is replaced by Inspector which is activated with <code>--inspect</code>\ninstead.</p>",
            "type": "module",
            "displayName": "DEP0062: `node --debug`",
            "apiType": "End-of-Life",
            "api": "node --debug"
        },
        {
            "name": "dep0063:_`serverresponse.prototype.writeheader()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <code>node:http</code> module <code>ServerResponse.prototype.writeHeader()</code> API is\ndeprecated. Please use <code>ServerResponse.prototype.writeHead()</code> instead.</p>\n<p>The <code>ServerResponse.prototype.writeHeader()</code> method was never documented as an\nofficially supported API.</p>",
            "type": "module",
            "displayName": "DEP0063: `ServerResponse.prototype.writeHeader()`",
            "apiType": "Documentation-only deprecation",
            "api": "ServerResponse.prototype.writeHeader()"
        },
        {
            "name": "dep0064:_`tls.createsecurepair()`",
            "desc": "<p>Type: Runtime</p>\n<p>The <code>tls.createSecurePair()</code> API was deprecated in documentation in Node.js\n0.11.3. Users should use <code>tls.Socket</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0064: `tls.createSecurePair()`",
            "apiType": "Runtime deprecaton",
            "api": "tls.createSecurePair()"
        },
        {
            "name": "dep0065:_`repl.repl_mode_magic`_and_`node_repl_mode=magic`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>node:repl</code> module's <code>REPL_MODE_MAGIC</code> constant, used for <code>replMode</code> option,\nhas been removed. Its behavior has been functionally identical to that of\n<code>REPL_MODE_SLOPPY</code> since Node.js 6.0.0, when V8 5.0 was imported. Please use\n<code>REPL_MODE_SLOPPY</code> instead.</p>\n<p>The <code>NODE_REPL_MODE</code> environment variable is used to set the underlying\n<code>replMode</code> of an interactive <code>node</code> session. Its value, <code>magic</code>, is also\nremoved. Please use <code>sloppy</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0065: `repl.REPL_MODE_MAGIC` and `NODE_REPL_MODE=magic`",
            "apiType": "End-of-Life",
            "api": "repl.REPL_MODE_MAGIC` and `NODE_REPL_MODE=magic"
        },
        {
            "name": "dep0066:_`outgoingmessage.prototype._headers,_outgoingmessage.prototype._headernames`",
            "desc": "<p>Type: Runtime</p>\n<p>The <code>node:http</code> module <code>OutgoingMessage.prototype._headers</code> and\n<code>OutgoingMessage.prototype._headerNames</code> properties are deprecated. Use one of\nthe public methods (e.g. <code>OutgoingMessage.prototype.getHeader()</code>,\n<code>OutgoingMessage.prototype.getHeaders()</code>,\n<code>OutgoingMessage.prototype.getHeaderNames()</code>,\n<code>OutgoingMessage.prototype.getRawHeaderNames()</code>,\n<code>OutgoingMessage.prototype.hasHeader()</code>,\n<code>OutgoingMessage.prototype.removeHeader()</code>,\n<code>OutgoingMessage.prototype.setHeader()</code>) for working with outgoing headers.</p>\n<p>The <code>OutgoingMessage.prototype._headers</code> and\n<code>OutgoingMessage.prototype._headerNames</code> properties were never documented as\nofficially supported properties.</p>",
            "type": "module",
            "displayName": "DEP0066: `OutgoingMessage.prototype._headers, OutgoingMessage.prototype._headerNames`",
            "apiType": "Runtime deprecaton",
            "api": "OutgoingMessage.prototype._headers, OutgoingMessage.prototype._headerNames"
        },
        {
            "name": "dep0067:_`outgoingmessage.prototype._renderheaders`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <code>node:http</code> module <code>OutgoingMessage.prototype._renderHeaders()</code> API is\ndeprecated.</p>\n<p>The <code>OutgoingMessage.prototype._renderHeaders</code> property was never documented as\nan officially supported API.</p>",
            "type": "module",
            "displayName": "DEP0067: `OutgoingMessage.prototype._renderHeaders`",
            "apiType": "Documentation-only deprecation",
            "api": "OutgoingMessage.prototype._renderHeaders"
        },
        {
            "name": "dep0068:_`node_debug`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>node debug</code> corresponds to the legacy CLI debugger which has been replaced with\na V8-inspector based CLI debugger available through <code>node inspect</code>.</p>",
            "type": "module",
            "displayName": "DEP0068: `node debug`",
            "apiType": "End-of-Life",
            "api": "node debug"
        },
        {
            "name": "dep0069:_`vm.runindebugcontext(string)`",
            "desc": "<p>Type: End-of-Life</p>\n<p>DebugContext has been removed in V8 and is not available in Node.js 10+.</p>\n<p>DebugContext was an experimental API.</p>",
            "type": "module",
            "displayName": "DEP0069: `vm.runInDebugContext(string)`",
            "apiType": "End-of-Life",
            "api": "vm.runInDebugContext(string)"
        },
        {
            "name": "dep0070:_`async_hooks.currentid()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>async_hooks.currentId()</code> was renamed to <code>async_hooks.executionAsyncId()</code> for\nclarity.</p>\n<p>This change was made while <code>async_hooks</code> was an experimental API.</p>",
            "type": "module",
            "displayName": "DEP0070: `async_hooks.currentId()`",
            "apiType": "End-of-Life",
            "api": "async_hooks.currentId()"
        },
        {
            "name": "dep0071:_`async_hooks.triggerid()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>async_hooks.triggerId()</code> was renamed to <code>async_hooks.triggerAsyncId()</code> for\nclarity.</p>\n<p>This change was made while <code>async_hooks</code> was an experimental API.</p>",
            "type": "module",
            "displayName": "DEP0071: `async_hooks.triggerId()`",
            "apiType": "End-of-Life",
            "api": "async_hooks.triggerId()"
        },
        {
            "name": "dep0072:_`async_hooks.asyncresource.triggerid()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>async_hooks.AsyncResource.triggerId()</code> was renamed to\n<code>async_hooks.AsyncResource.triggerAsyncId()</code> for clarity.</p>\n<p>This change was made while <code>async_hooks</code> was an experimental API.</p>",
            "type": "module",
            "displayName": "DEP0072: `async_hooks.AsyncResource.triggerId()`",
            "apiType": "End-of-Life",
            "api": "async_hooks.AsyncResource.triggerId()"
        },
        {
            "name": "dep0073:_several_internal_properties_of_`net.server`",
            "desc": "<p>Type: End-of-Life</p>\n<p>Accessing several internal, undocumented properties of <code>net.Server</code> instances\nwith inappropriate names is deprecated.</p>\n<p>As the original API was undocumented and not generally useful for non-internal\ncode, no replacement API is provided.</p>",
            "type": "module",
            "displayName": "DEP0073: Several internal properties of `net.Server`",
            "apiType": "End-of-Life",
            "api": "net.Server"
        },
        {
            "name": "dep0074:_`replserver.bufferedcommand`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>REPLServer.bufferedCommand</code> property was deprecated in favor of\n<a href=\"repl.html#replserverclearbufferedcommand\"><code>REPLServer.clearBufferedCommand()</code></a>.</p>",
            "type": "module",
            "displayName": "DEP0074: `REPLServer.bufferedCommand`",
            "apiType": "End-of-Life",
            "api": "REPLServer.bufferedCommand"
        },
        {
            "name": "dep0075:_`replserver.parsereplkeyword()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>REPLServer.parseREPLKeyword()</code> was removed from userland visibility.</p>",
            "type": "module",
            "displayName": "DEP0075: `REPLServer.parseREPLKeyword()`",
            "apiType": "End-of-Life",
            "api": "REPLServer.parseREPLKeyword()"
        },
        {
            "name": "dep0076:_`tls.parsecertstring()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>tls.parseCertString()</code> was a trivial parsing helper that was made public by\nmistake. While it was supposed to parse certificate subject and issuer strings,\nit never handled multi-value Relative Distinguished Names correctly.</p>\n<p>Earlier versions of this document suggested using <code>querystring.parse()</code> as an\nalternative to <code>tls.parseCertString()</code>. However, <code>querystring.parse()</code> also does\nnot handle all certificate subjects correctly and should not be used.</p>",
            "type": "module",
            "displayName": "DEP0076: `tls.parseCertString()`",
            "apiType": "End-of-Life",
            "api": "tls.parseCertString()"
        },
        {
            "name": "dep0077:_`module._debug()`",
            "desc": "<p>Type: Runtime</p>\n<p><code>Module._debug()</code> is deprecated.</p>\n<p>The <code>Module._debug()</code> function was never documented as an officially\nsupported API.</p>",
            "type": "module",
            "displayName": "DEP0077: `Module._debug()`",
            "apiType": "Runtime deprecaton",
            "api": "Module._debug()"
        },
        {
            "name": "dep0078:_`replserver.turnoffeditormode()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>REPLServer.turnOffEditorMode()</code> was removed from userland visibility.</p>",
            "type": "module",
            "displayName": "DEP0078: `REPLServer.turnOffEditorMode()`",
            "apiType": "End-of-Life",
            "api": "REPLServer.turnOffEditorMode()"
        },
        {
            "name": "dep0079:_custom_inspection_function_on_objects_via_`.inspect()`",
            "desc": "<p>Type: End-of-Life</p>\n<p>Using a property named <code>inspect</code> on an object to specify a custom inspection\nfunction for <a href=\"util.html#utilinspectobject-options\"><code>util.inspect()</code></a> is deprecated. Use <a href=\"util.html#utilinspectcustom\"><code>util.inspect.custom</code></a>\ninstead. For backward compatibility with Node.js prior to version 6.4.0, both\ncan be specified.</p>",
            "type": "module",
            "displayName": "DEP0079: Custom inspection function on objects via `.inspect()`",
            "apiType": "End-of-Life",
            "api": ".inspect()"
        },
        {
            "name": "dep0080:_`path._makelong()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The internal <code>path._makeLong()</code> was not intended for public use. However,\nuserland modules have found it useful. The internal API is deprecated\nand replaced with an identical, public <code>path.toNamespacedPath()</code> method.</p>",
            "type": "module",
            "displayName": "DEP0080: `path._makeLong()`",
            "apiType": "Documentation-only deprecation",
            "api": "path._makeLong()"
        },
        {
            "name": "dep0081:_`fs.truncate()`_using_a_file_descriptor",
            "desc": "<p>Type: Runtime</p>\n<p><code>fs.truncate()</code> <code>fs.truncateSync()</code> usage with a file descriptor is\ndeprecated. Please use <code>fs.ftruncate()</code> or <code>fs.ftruncateSync()</code> to work with\nfile descriptors.</p>",
            "type": "module",
            "displayName": "DEP0081: `fs.truncate()` using a file descriptor",
            "apiType": "Runtime deprecaton",
            "api": "fs.truncate()"
        },
        {
            "name": "dep0082:_`replserver.prototype.memory()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>REPLServer.prototype.memory()</code> is only necessary for the internal mechanics of\nthe <code>REPLServer</code> itself. Do not use this function.</p>",
            "type": "module",
            "displayName": "DEP0082: `REPLServer.prototype.memory()`",
            "apiType": "End-of-Life",
            "api": "REPLServer.prototype.memory()"
        },
        {
            "name": "dep0083:_disabling_ecdh_by_setting_`ecdhcurve`_to_`false`",
            "desc": "<p>Type: End-of-Life.</p>\n<p>The <code>ecdhCurve</code> option to <code>tls.createSecureContext()</code> and <code>tls.TLSSocket</code> could\nbe set to <code>false</code> to disable ECDH entirely on the server only. This mode was\ndeprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with\nthe client and is now unsupported. Use the <code>ciphers</code> parameter instead.</p>",
            "type": "module",
            "displayName": "DEP0083: Disabling ECDH by setting `ecdhCurve` to `false`",
            "apiType": "End-of-Life",
            "api": "ecdhCurve` to `false"
        },
        {
            "name": "dep0084:_requiring_bundled_internal_dependencies",
            "desc": "<p>Type: End-of-Life</p>\n<p>Since Node.js versions 4.4.0 and 5.2.0, several modules only intended for\ninternal usage were mistakenly exposed to user code through <code>require()</code>. These\nmodules were:</p>\n<ul>\n<li><code>v8/tools/codemap</code></li>\n<li><code>v8/tools/consarray</code></li>\n<li><code>v8/tools/csvparser</code></li>\n<li><code>v8/tools/logreader</code></li>\n<li><code>v8/tools/profile_view</code></li>\n<li><code>v8/tools/profile</code></li>\n<li><code>v8/tools/SourceMap</code></li>\n<li><code>v8/tools/splaytree</code></li>\n<li><code>v8/tools/tickprocessor-driver</code></li>\n<li><code>v8/tools/tickprocessor</code></li>\n<li><code>node-inspect/lib/_inspect</code> (from 7.6.0)</li>\n<li><code>node-inspect/lib/internal/inspect_client</code> (from 7.6.0)</li>\n<li><code>node-inspect/lib/internal/inspect_repl</code> (from 7.6.0)</li>\n</ul>\n<p>The <code>v8/*</code> modules do not have any exports, and if not imported in a specific\norder would in fact throw errors. As such there are virtually no legitimate use\ncases for importing them through <code>require()</code>.</p>\n<p>On the other hand, <code>node-inspect</code> can be installed locally through a package\nmanager, as it is published on the npm registry under the same name. No source\ncode modification is necessary if that is done.</p>",
            "type": "module",
            "displayName": "DEP0084: requiring bundled internal dependencies",
            "apiType": "End-of-Life",
            "api": "DEP0084: requiring bundled internal dependencie"
        },
        {
            "name": "dep0085:_asynchooks_sensitive_api",
            "desc": "<p>Type: End-of-Life</p>\n<p>The AsyncHooks sensitive API was never documented and had various minor issues.\nUse the <code>AsyncResource</code> API instead. See\n<a href=\"https://github.com/nodejs/node/issues/15572\">https://github.com/nodejs/node/issues/15572</a>.</p>",
            "type": "module",
            "displayName": "DEP0085: AsyncHooks sensitive API",
            "apiType": "End-of-Life",
            "api": "DEP0085: AsyncHooks sensitive AP"
        },
        {
            "name": "dep0086:_remove_`runinasyncidscope`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>runInAsyncIdScope</code> doesn't emit the <code>'before'</code> or <code>'after'</code> event and can thus\ncause a lot of issues. See <a href=\"https://github.com/nodejs/node/issues/14328\">https://github.com/nodejs/node/issues/14328</a>.</p>\n<!-- md-lint skip-deprecation DEP0087 -->\n<!-- md-lint skip-deprecation DEP0088 -->",
            "type": "module",
            "displayName": "DEP0086: Remove `runInAsyncIdScope`",
            "apiType": "End-of-Life",
            "api": "runInAsyncIdScope"
        },
        {
            "name": "dep0089:_`require('node:assert')`",
            "desc": "<p>Type: Deprecation revoked</p>\n<p>Importing assert directly was not recommended as the exposed functions use\nloose equality checks. The deprecation was revoked because use of the\n<code>node:assert</code> module is not discouraged, and the deprecation caused developer\nconfusion.</p>",
            "type": "module",
            "displayName": "DEP0089: `require('node:assert')`",
            "api": "require('node:assert')"
        },
        {
            "name": "dep0090:_invalid_gcm_authentication_tag_lengths",
            "desc": "<p>Type: End-of-Life</p>\n<p>Node.js used to support all GCM authentication tag lengths which are accepted by\nOpenSSL when calling <a href=\"crypto.html#deciphersetauthtagbuffer-encoding\"><code>decipher.setAuthTag()</code></a>. Beginning with Node.js\nv11.0.0, only authentication tag lengths of 128, 120, 112, 104, 96, 64, and 32\nbits are allowed. Authentication tags of other lengths are invalid per\n<a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\">NIST SP 800-38D</a>.</p>",
            "type": "module",
            "displayName": "DEP0090: Invalid GCM authentication tag lengths",
            "apiType": "End-of-Life",
            "api": "DEP0090: Invalid GCM authentication tag length"
        },
        {
            "name": "dep0091:_`crypto.default_encoding`",
            "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"crypto.html#cryptodefault_encoding\"><code>crypto.DEFAULT_ENCODING</code></a> property is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0091: `crypto.DEFAULT_ENCODING`",
            "apiType": "Runtime deprecaton",
            "api": "crypto.DEFAULT_ENCODING"
        },
        {
            "name": "dep0092:_top-level_`this`_bound_to_`module.exports`",
            "desc": "<p>Type: Documentation-only</p>\n<p>Assigning properties to the top-level <code>this</code> as an alternative\nto <code>module.exports</code> is deprecated. Developers should use <code>exports</code>\nor <code>module.exports</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0092: Top-level `this` bound to `module.exports`",
            "apiType": "Documentation-only deprecation",
            "api": "this` bound to `module.exports"
        },
        {
            "name": "dep0093:_`crypto.fips`_is_deprecated_and_replaced",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"crypto.html#cryptofips\"><code>crypto.fips</code></a> property is deprecated. Please use <code>crypto.setFips()</code>\nand <code>crypto.getFips()</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0093: `crypto.fips` is deprecated and replaced",
            "apiType": "Documentation-only deprecation",
            "api": "crypto.fips"
        },
        {
            "name": "dep0094:_using_`assert.fail()`_with_more_than_one_argument",
            "desc": "<p>Type: Runtime</p>\n<p>Using <code>assert.fail()</code> with more than one argument is deprecated. Use\n<code>assert.fail()</code> with only one argument or use a different <code>node:assert</code> module\nmethod.</p>",
            "type": "module",
            "displayName": "DEP0094: Using `assert.fail()` with more than one argument",
            "apiType": "Runtime deprecaton",
            "api": "assert.fail()"
        },
        {
            "name": "dep0095:_`timers.enroll()`",
            "desc": "<p>Type: Runtime</p>\n<p><code>timers.enroll()</code> is deprecated. Please use the publicly documented\n<a href=\"timers.html#settimeoutcallback-delay-args\"><code>setTimeout()</code></a> or <a href=\"timers.html#setintervalcallback-delay-args\"><code>setInterval()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0095: `timers.enroll()`",
            "apiType": "Runtime deprecaton",
            "api": "timers.enroll()"
        },
        {
            "name": "dep0096:_`timers.unenroll()`",
            "desc": "<p>Type: Runtime</p>\n<p><code>timers.unenroll()</code> is deprecated. Please use the publicly documented\n<a href=\"timers.html#cleartimeouttimeout\"><code>clearTimeout()</code></a> or <a href=\"timers.html#clearintervaltimeout\"><code>clearInterval()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0096: `timers.unenroll()`",
            "apiType": "Runtime deprecaton",
            "api": "timers.unenroll()"
        },
        {
            "name": "dep0097:_`makecallback`_with_`domain`_property",
            "desc": "<p>Type: Runtime</p>\n<p>Users of <code>MakeCallback</code> that add the <code>domain</code> property to carry context,\nshould start using the <code>async_context</code> variant of <code>MakeCallback</code> or\n<code>CallbackScope</code>, or the high-level <code>AsyncResource</code> class.</p>",
            "type": "module",
            "displayName": "DEP0097: `MakeCallback` with `domain` property",
            "apiType": "Runtime deprecaton",
            "api": "MakeCallback` with `domain"
        },
        {
            "name": "dep0098:_asynchooks_embedder_`asyncresource.emitbefore`_and_`asyncresource.emitafter`_apis",
            "desc": "<p>Type: End-of-Life</p>\n<p>The embedded API provided by AsyncHooks exposes <code>.emitBefore()</code> and\n<code>.emitAfter()</code> methods which are very easy to use incorrectly which can lead\nto unrecoverable errors.</p>\n<p>Use <a href=\"async_context.html#asyncresourceruninasyncscopefn-thisarg-args\"><code>asyncResource.runInAsyncScope()</code></a> API instead which provides a much\nsafer, and more convenient, alternative. See\n<a href=\"https://github.com/nodejs/node/pull/18513\">https://github.com/nodejs/node/pull/18513</a>.</p>",
            "type": "module",
            "displayName": "DEP0098: AsyncHooks embedder `AsyncResource.emitBefore` and `AsyncResource.emitAfter` APIs",
            "apiType": "End-of-Life",
            "api": "AsyncResource.emitBefore` and `AsyncResource.emitAfter"
        },
        {
            "name": "dep0099:_async_context-unaware_`node::makecallback`_c++_apis",
            "desc": "<p>Type: Compile-time</p>\n<p>Certain versions of <code>node::MakeCallback</code> APIs available to native addons are\ndeprecated. Please use the versions of the API that accept an <code>async_context</code>\nparameter.</p>",
            "type": "module",
            "displayName": "DEP0099: Async context-unaware `node::MakeCallback` C++ APIs",
            "api": "node::MakeCallback"
        },
        {
            "name": "dep0100:_`process.assert()`",
            "desc": "<p>Type: Runtime</p>\n<p><code>process.assert()</code> is deprecated. Please use the <a href=\"assert.html\"><code>assert</code></a> module instead.</p>\n<p>This was never a documented feature.</p>",
            "type": "module",
            "displayName": "DEP0100: `process.assert()`",
            "apiType": "Runtime deprecaton",
            "api": "process.assert()"
        },
        {
            "name": "dep0101:_`--with-lttng`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>--with-lttng</code> compile-time option has been removed.</p>",
            "type": "module",
            "displayName": "DEP0101: `--with-lttng`",
            "apiType": "End-of-Life",
            "api": "--with-lttng"
        },
        {
            "name": "dep0102:_using_`noassert`_in_`buffer#(read|write)`_operations",
            "desc": "<p>Type: End-of-Life</p>\n<p>Using the <code>noAssert</code> argument has no functionality anymore. All input is\nverified regardless of the value of <code>noAssert</code>. Skipping the verification\ncould lead to hard-to-find errors and crashes.</p>",
            "type": "module",
            "displayName": "DEP0102: Using `noAssert` in `Buffer#(read|write)` operations",
            "apiType": "End-of-Life",
            "api": "noAssert` in `Buffer#(read|write)"
        },
        {
            "name": "dep0103:_`process.binding('util').is[...]`_typechecks",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>Using <code>process.binding()</code> in general should be avoided. The type checking\nmethods in particular can be replaced by using <a href=\"util.html#utiltypes\"><code>util.types</code></a>.</p>\n<p>This deprecation has been superseded by the deprecation of the\n<code>process.binding()</code> API (<a href=\"#DEP0111\">DEP0111</a>).</p>",
            "type": "module",
            "displayName": "DEP0103: `process.binding('util').is[...]` typechecks",
            "apiType": "Documentation-only deprecation",
            "api": "process.binding('util').is[...]"
        },
        {
            "name": "dep0104:_`process.env`_string_coercion",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>When assigning a non-string property to <a href=\"process.html#processenv\"><code>process.env</code></a>, the assigned value is\nimplicitly converted to a string. This behavior is deprecated if the assigned\nvalue is not a string, boolean, or number. In the future, such assignment might\nresult in a thrown error. Please convert the property to a string before\nassigning it to <code>process.env</code>.</p>",
            "type": "module",
            "displayName": "DEP0104: `process.env` string coercion",
            "apiType": "Documentation-only deprecation",
            "api": "process.env"
        },
        {
            "name": "dep0105:_`decipher.finaltol`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>decipher.finaltol()</code> has never been documented and was an alias for\n<a href=\"crypto.html#decipherfinaloutputencoding\"><code>decipher.final()</code></a>. This API has been removed, and it is recommended to use\n<a href=\"crypto.html#decipherfinaloutputencoding\"><code>decipher.final()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0105: `decipher.finaltol`",
            "apiType": "End-of-Life",
            "api": "decipher.finaltol"
        },
        {
            "name": "dep0106:_`crypto.createcipher`_and_`crypto.createdecipher`",
            "desc": "<p>Type: Runtime</p>\n<p>Using <a href=\"crypto.html#cryptocreatecipheralgorithm-password-options\"><code>crypto.createCipher()</code></a> and <a href=\"crypto.html#cryptocreatedecipheralgorithm-password-options\"><code>crypto.createDecipher()</code></a> must be\navoided as they use a weak key derivation function (MD5 with no salt) and static\ninitialization vectors. It is recommended to derive a key using\n<a href=\"crypto.html#cryptopbkdf2password-salt-iterations-keylen-digest-callback\"><code>crypto.pbkdf2()</code></a> or <a href=\"crypto.html#cryptoscryptpassword-salt-keylen-options-callback\"><code>crypto.scrypt()</code></a> with random salts and to use\n<a href=\"crypto.html#cryptocreatecipherivalgorithm-key-iv-options\"><code>crypto.createCipheriv()</code></a> and <a href=\"crypto.html#cryptocreatedecipherivalgorithm-key-iv-options\"><code>crypto.createDecipheriv()</code></a> to obtain the\n<a href=\"crypto.html#class-cipher\"><code>Cipher</code></a> and <a href=\"crypto.html#class-decipher\"><code>Decipher</code></a> objects respectively.</p>",
            "type": "module",
            "displayName": "DEP0106: `crypto.createCipher` and `crypto.createDecipher`",
            "apiType": "Runtime deprecaton",
            "api": "crypto.createCipher` and `crypto.createDecipher"
        },
        {
            "name": "dep0107:_`tls.convertnpnprotocols()`",
            "desc": "<p>Type: End-of-Life</p>\n<p>This was an undocumented helper function not intended for use outside Node.js\ncore and obsoleted by the removal of NPN (Next Protocol Negotiation) support.</p>",
            "type": "module",
            "displayName": "DEP0107: `tls.convertNPNProtocols()`",
            "apiType": "End-of-Life",
            "api": "tls.convertNPNProtocols()"
        },
        {
            "name": "dep0108:_`zlib.bytesread`",
            "desc": "<p>Type: Runtime</p>\n<p>Deprecated alias for <a href=\"zlib.html#zlibbyteswritten\"><code>zlib.bytesWritten</code></a>. This original name was chosen\nbecause it also made sense to interpret the value as the number of bytes\nread by the engine, but is inconsistent with other streams in Node.js that\nexpose values under these names.</p>",
            "type": "module",
            "displayName": "DEP0108: `zlib.bytesRead`",
            "apiType": "Runtime deprecaton",
            "api": "zlib.bytesRead"
        },
        {
            "name": "dep0109:_`http`,_`https`,_and_`tls`_support_for_invalid_urls",
            "desc": "<p>Type: End-of-Life</p>\n<p>Some previously supported (but strictly invalid) URLs were accepted through the\n<a href=\"http.html#httprequestoptions-callback\"><code>http.request()</code></a>, <a href=\"http.html#httpgetoptions-callback\"><code>http.get()</code></a>, <a href=\"https.html#httpsrequestoptions-callback\"><code>https.request()</code></a>,\n<a href=\"https.html#httpsgetoptions-callback\"><code>https.get()</code></a>, and <a href=\"tls.html#tlscheckserveridentityhostname-cert\"><code>tls.checkServerIdentity()</code></a> APIs because those were\naccepted by the legacy <code>url.parse()</code> API. The mentioned APIs now use the WHATWG\nURL parser that requires strictly valid URLs. Passing an invalid URL is\ndeprecated and support will be removed in the future.</p>",
            "type": "module",
            "displayName": "DEP0109: `http`, `https`, and `tls` support for invalid URLs",
            "apiType": "End-of-Life",
            "api": "http`, `https`, and `tls"
        },
        {
            "name": "dep0110:_`vm.script`_cached_data",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <code>produceCachedData</code> option is deprecated. Use\n<a href=\"vm.html#scriptcreatecacheddata\"><code>script.createCachedData()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0110: `vm.Script` cached data",
            "apiType": "Documentation-only deprecation",
            "api": "vm.Script"
        },
        {
            "name": "dep0111:_`process.binding()`",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p><code>process.binding()</code> is for use by Node.js internal code only.</p>",
            "type": "module",
            "displayName": "DEP0111: `process.binding()`",
            "apiType": "Documentation-only deprecation",
            "api": "process.binding()"
        },
        {
            "name": "dep0112:_`dgram`_private_apis",
            "desc": "<p>Type: Runtime</p>\n<p>The <code>node:dgram</code> module previously contained several APIs that were never meant\nto accessed outside of Node.js core: <code>Socket.prototype._handle</code>,\n<code>Socket.prototype._receiving</code>, <code>Socket.prototype._bindState</code>,\n<code>Socket.prototype._queue</code>, <code>Socket.prototype._reuseAddr</code>,\n<code>Socket.prototype._healthCheck()</code>, <code>Socket.prototype._stopReceiving()</code>, and\n<code>dgram._createSocketHandle()</code>.</p>",
            "type": "module",
            "displayName": "DEP0112: `dgram` private APIs",
            "apiType": "Runtime deprecaton",
            "api": "dgram"
        },
        {
            "name": "dep0113:_`cipher.setauthtag()`,_`decipher.getauthtag()`",
            "desc": "<p>Type: End-of-Life</p>\n<p><code>Cipher.setAuthTag()</code> and <code>Decipher.getAuthTag()</code> are no longer available. They\nwere never documented and would throw when called.</p>",
            "type": "module",
            "displayName": "DEP0113: `Cipher.setAuthTag()`, `Decipher.getAuthTag()`",
            "apiType": "End-of-Life",
            "api": "Cipher.setAuthTag()`, `Decipher.getAuthTag()"
        },
        {
            "name": "dep0114:_`crypto._tobuf()`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>crypto._toBuf()</code> function was not designed to be used by modules outside\nof Node.js core and was removed.</p>\n<!--lint disable nodejs-yaml-comments -->",
            "type": "module",
            "displayName": "DEP0114: `crypto._toBuf()`",
            "apiType": "End-of-Life",
            "api": "crypto._toBuf()"
        },
        {
            "name": "dep0115:_`crypto.prng()`,_`crypto.pseudorandombytes()`,_`crypto.rng()`",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<!--lint enable nodejs-yaml-comments -->\n<p>In recent versions of Node.js, there is no difference between\n<a href=\"crypto.html#cryptorandombytessize-callback\"><code>crypto.randomBytes()</code></a> and <code>crypto.pseudoRandomBytes()</code>. The latter is\ndeprecated along with the undocumented aliases <code>crypto.prng()</code> and\n<code>crypto.rng()</code> in favor of <a href=\"crypto.html#cryptorandombytessize-callback\"><code>crypto.randomBytes()</code></a> and might be removed in a\nfuture release.</p>",
            "type": "module",
            "displayName": "DEP0115: `crypto.prng()`, `crypto.pseudoRandomBytes()`, `crypto.rng()`",
            "apiType": "Documentation-only deprecation",
            "api": "crypto.prng()`, `crypto.pseudoRandomBytes()`, `crypto.rng()"
        },
        {
            "name": "dep0116:_legacy_url_api",
            "desc": "<p>Type: Deprecation revoked</p>\n<p>The <a href=\"url.html#legacy-url-api\">legacy URL API</a> is deprecated. This includes <a href=\"url.html#urlformaturlobject\"><code>url.format()</code></a>,\n<a href=\"url.html#urlparseurlstring-parsequerystring-slashesdenotehost\"><code>url.parse()</code></a>, <a href=\"url.html#urlresolvefrom-to\"><code>url.resolve()</code></a>, and the <a href=\"url.html#legacy-urlobject\">legacy <code>urlObject</code></a>. Please\nuse the <a href=\"url.html#the-whatwg-url-api\">WHATWG URL API</a> instead.</p>",
            "type": "module",
            "displayName": "DEP0116: Legacy URL API",
            "api": "DEP0116: Legacy URL AP"
        },
        {
            "name": "dep0117:_native_crypto_handles",
            "desc": "<p>Type: End-of-Life</p>\n<p>Previous versions of Node.js exposed handles to internal native objects through\nthe <code>_handle</code> property of the <code>Cipher</code>, <code>Decipher</code>, <code>DiffieHellman</code>,\n<code>DiffieHellmanGroup</code>, <code>ECDH</code>, <code>Hash</code>, <code>Hmac</code>, <code>Sign</code>, and <code>Verify</code> classes.\nThe <code>_handle</code> property has been removed because improper use of the native\nobject can lead to crashing the application.</p>",
            "type": "module",
            "displayName": "DEP0117: Native crypto handles",
            "apiType": "End-of-Life",
            "api": "DEP0117: Native crypto handle"
        },
        {
            "name": "dep0118:_`dns.lookup()`_support_for_a_falsy_host_name",
            "desc": "<p>Type: Runtime</p>\n<p>Previous versions of Node.js supported <code>dns.lookup()</code> with a falsy host name\nlike <code>dns.lookup(false)</code> due to backward compatibility.\nThis behavior is undocumented and is thought to be unused in real world apps.\nIt will become an error in future versions of Node.js.</p>",
            "type": "module",
            "displayName": "DEP0118: `dns.lookup()` support for a falsy host name",
            "apiType": "Runtime deprecaton",
            "api": "dns.lookup()"
        },
        {
            "name": "dep0119:_`process.binding('uv').errname()`_private_api",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p><code>process.binding('uv').errname()</code> is deprecated. Please use\n<a href=\"util.html#utilgetsystemerrornameerr\"><code>util.getSystemErrorName()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0119: `process.binding('uv').errname()` private API",
            "apiType": "Documentation-only deprecation",
            "api": "process.binding('uv').errname()"
        },
        {
            "name": "dep0120:_windows_performance_counter_support",
            "desc": "<p>Type: End-of-Life</p>\n<p>Windows Performance Counter support has been removed from Node.js. The\nundocumented <code>COUNTER_NET_SERVER_CONNECTION()</code>,\n<code>COUNTER_NET_SERVER_CONNECTION_CLOSE()</code>, <code>COUNTER_HTTP_SERVER_REQUEST()</code>,\n<code>COUNTER_HTTP_SERVER_RESPONSE()</code>, <code>COUNTER_HTTP_CLIENT_REQUEST()</code>, and\n<code>COUNTER_HTTP_CLIENT_RESPONSE()</code> functions have been deprecated.</p>",
            "type": "module",
            "displayName": "DEP0120: Windows Performance Counter support",
            "apiType": "End-of-Life",
            "api": "DEP0120: Windows Performance Counter suppor"
        },
        {
            "name": "dep0121:_`net._setsimultaneousaccepts()`",
            "desc": "<p>Type: Runtime</p>\n<p>The undocumented <code>net._setSimultaneousAccepts()</code> function was originally\nintended for debugging and performance tuning when using the\n<code>node:child_process</code> and <code>node:cluster</code> modules on Windows. The function is not\ngenerally useful and is being removed. See discussion here:\n<a href=\"https://github.com/nodejs/node/issues/18391\">https://github.com/nodejs/node/issues/18391</a></p>",
            "type": "module",
            "displayName": "DEP0121: `net._setSimultaneousAccepts()`",
            "apiType": "Runtime deprecaton",
            "api": "net._setSimultaneousAccepts()"
        },
        {
            "name": "dep0122:_`tls`_`server.prototype.setoptions()`",
            "desc": "<p>Type: Runtime</p>\n<p>Please use <code>Server.prototype.setSecureContext()</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0122: `tls` `Server.prototype.setOptions()`",
            "apiType": "Runtime deprecaton",
            "api": "tls` `Server.prototype.setOptions()"
        },
        {
            "name": "dep0123:_setting_the_tls_servername_to_an_ip_address",
            "desc": "<p>Type: Runtime</p>\n<p>Setting the TLS ServerName to an IP address is not permitted by\n<a href=\"https://tools.ietf.org/html/rfc6066#section-3\">RFC 6066</a>. This will be ignored in a future version.</p>",
            "type": "module",
            "displayName": "DEP0123: setting the TLS ServerName to an IP address",
            "apiType": "Runtime deprecaton",
            "api": "DEP0123: setting the TLS ServerName to an IP addres"
        },
        {
            "name": "dep0124:_using_`replserver.rli`",
            "desc": "<p>Type: End-of-Life</p>\n<p>This property is a reference to the instance itself.</p>",
            "type": "module",
            "displayName": "DEP0124: using `REPLServer.rli`",
            "apiType": "End-of-Life",
            "api": "REPLServer.rli"
        },
        {
            "name": "dep0125:_`require('node:_stream_wrap')`",
            "desc": "<p>Type: Runtime</p>\n<p>The <code>node:_stream_wrap</code> module is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0125: `require('node:_stream_wrap')`",
            "apiType": "Runtime deprecaton",
            "api": "require('node:_stream_wrap')"
        },
        {
            "name": "dep0126:_`timers.active()`",
            "desc": "<p>Type: Runtime</p>\n<p>The previously undocumented <code>timers.active()</code> is deprecated.\nPlease use the publicly documented <a href=\"timers.html#timeoutrefresh\"><code>timeout.refresh()</code></a> instead.\nIf re-referencing the timeout is necessary, <a href=\"timers.html#timeoutref\"><code>timeout.ref()</code></a> can be used\nwith no performance impact since Node.js 10.</p>",
            "type": "module",
            "displayName": "DEP0126: `timers.active()`",
            "apiType": "Runtime deprecaton",
            "api": "timers.active()"
        },
        {
            "name": "dep0127:_`timers._unrefactive()`",
            "desc": "<p>Type: Runtime</p>\n<p>The previously undocumented and \"private\" <code>timers._unrefActive()</code> is deprecated.\nPlease use the publicly documented <a href=\"timers.html#timeoutrefresh\"><code>timeout.refresh()</code></a> instead.\nIf unreferencing the timeout is necessary, <a href=\"timers.html#timeoutunref\"><code>timeout.unref()</code></a> can be used\nwith no performance impact since Node.js 10.</p>",
            "type": "module",
            "displayName": "DEP0127: `timers._unrefActive()`",
            "apiType": "Runtime deprecaton",
            "api": "timers._unrefActive()"
        },
        {
            "name": "dep0128:_modules_with_an_invalid_`main`_entry_and_an_`index.js`_file",
            "desc": "<p>Type: Runtime</p>\n<p>Modules that have an invalid <code>main</code> entry (e.g., <code>./does-not-exist.js</code>) and\nalso have an <code>index.js</code> file in the top level directory will resolve the\n<code>index.js</code> file. That is deprecated and is going to throw an error in future\nNode.js versions.</p>",
            "type": "module",
            "displayName": "DEP0128: modules with an invalid `main` entry and an `index.js` file",
            "apiType": "Runtime deprecaton",
            "api": "main` entry and an `index.js"
        },
        {
            "name": "dep0129:_`childprocess._channel`",
            "desc": "<p>Type: Runtime</p>\n<p>The <code>_channel</code> property of child process objects returned by <code>spawn()</code> and\nsimilar functions is not intended for public use. Use <code>ChildProcess.channel</code>\ninstead.</p>",
            "type": "module",
            "displayName": "DEP0129: `ChildProcess._channel`",
            "apiType": "Runtime deprecaton",
            "api": "ChildProcess._channel"
        },
        {
            "name": "dep0130:_`module.createrequirefrompath()`",
            "desc": "<p>Type: End-of-Life</p>\n<p>Use <a href=\"module.html#modulecreaterequirefilename\"><code>module.createRequire()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0130: `Module.createRequireFromPath()`",
            "apiType": "End-of-Life",
            "api": "Module.createRequireFromPath()"
        },
        {
            "name": "dep0131:_legacy_http_parser",
            "desc": "<p>Type: End-of-Life</p>\n<p>The legacy HTTP parser, used by default in versions of Node.js prior to 12.0.0,\nis deprecated and has been removed in v13.0.0. Prior to v13.0.0, the\n<code>--http-parser=legacy</code> command-line flag could be used to revert to using the\nlegacy parser.</p>",
            "type": "module",
            "displayName": "DEP0131: Legacy HTTP parser",
            "apiType": "End-of-Life",
            "api": "DEP0131: Legacy HTTP parse"
        },
        {
            "name": "dep0132:_`worker.terminate()`_with_callback",
            "desc": "<p>Type: Runtime</p>\n<p>Passing a callback to <a href=\"worker_threads.html#workerterminate\"><code>worker.terminate()</code></a> is deprecated. Use the returned\n<code>Promise</code> instead, or a listener to the worker's <code>'exit'</code> event.</p>",
            "type": "module",
            "displayName": "DEP0132: `worker.terminate()` with callback",
            "apiType": "Runtime deprecaton",
            "api": "worker.terminate()"
        },
        {
            "name": "dep0133:_`http`_`connection`",
            "desc": "<p>Type: Documentation-only</p>\n<p>Prefer <a href=\"http.html#responsesocket\"><code>response.socket</code></a> over <a href=\"http.html#responseconnection\"><code>response.connection</code></a> and\n<a href=\"http.html#requestsocket\"><code>request.socket</code></a> over <a href=\"http.html#requestconnection\"><code>request.connection</code></a>.</p>",
            "type": "module",
            "displayName": "DEP0133: `http` `connection`",
            "apiType": "Documentation-only deprecation",
            "api": "http` `connection"
        },
        {
            "name": "dep0134:_`process._tickcallback`",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>The <code>process._tickCallback</code> property was never documented as\nan officially supported API.</p>",
            "type": "module",
            "displayName": "DEP0134: `process._tickCallback`",
            "apiType": "Documentation-only deprecation",
            "api": "process._tickCallback"
        },
        {
            "name": "dep0135:_`writestream.open()`_and_`readstream.open()`_are_internal",
            "desc": "<p>Type: Runtime</p>\n<p><a href=\"fs.html#class-fswritestream\"><code>WriteStream.open()</code></a> and <a href=\"fs.html#class-fsreadstream\"><code>ReadStream.open()</code></a> are undocumented internal\nAPIs that do not make sense to use in userland. File streams should always be\nopened through their corresponding factory methods <a href=\"fs.html#fscreatewritestreampath-options\"><code>fs.createWriteStream()</code></a>\nand <a href=\"fs.html#fscreatereadstreampath-options\"><code>fs.createReadStream()</code></a>) or by passing a file descriptor in options.</p>",
            "type": "module",
            "displayName": "DEP0135: `WriteStream.open()` and `ReadStream.open()` are internal",
            "apiType": "Runtime deprecaton",
            "api": "WriteStream.open()` and `ReadStream.open()"
        },
        {
            "name": "dep0136:_`http`_`finished`",
            "desc": "<p>Type: Documentation-only</p>\n<p><a href=\"http.html#responsefinished\"><code>response.finished</code></a> indicates whether <a href=\"http.html#responseenddata-encoding-callback\"><code>response.end()</code></a> has been\ncalled, not whether <code>'finish'</code> has been emitted and the underlying data\nis flushed.</p>\n<p>Use <a href=\"http.html#responsewritablefinished\"><code>response.writableFinished</code></a> or <a href=\"http.html#responsewritableended\"><code>response.writableEnded</code></a>\naccordingly instead to avoid the ambiguity.</p>\n<p>To maintain existing behavior <code>response.finished</code> should be replaced with\n<code>response.writableEnded</code>.</p>",
            "type": "module",
            "displayName": "DEP0136: `http` `finished`",
            "apiType": "Documentation-only deprecation",
            "api": "http` `finished"
        },
        {
            "name": "dep0137:_closing_fs.filehandle_on_garbage_collection",
            "desc": "<p>Type: Runtime</p>\n<p>Allowing a <a href=\"fs.html#class-filehandle\"><code>fs.FileHandle</code></a> object to be closed on garbage collection is\ndeprecated. In the future, doing so might result in a thrown error that will\nterminate the process.</p>\n<p>Please ensure that all <code>fs.FileHandle</code> objects are explicitly closed using\n<code>FileHandle.prototype.close()</code> when the <code>fs.FileHandle</code> is no longer needed:</p>\n<pre><code class=\"language-js\">const fsPromises = require('node:fs').promises;\nasync function openAndClose() {\n  let filehandle;\n  try {\n    filehandle = await fsPromises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n</code></pre>",
            "type": "module",
            "displayName": "DEP0137: Closing fs.FileHandle on garbage collection",
            "apiType": "Runtime deprecaton",
            "api": "DEP0137: Closing fs.FileHandle on garbage collectio"
        },
        {
            "name": "dep0138:_`process.mainmodule`",
            "desc": "<p>Type: Documentation-only</p>\n<p><a href=\"process.html#processmainmodule\"><code>process.mainModule</code></a> is a CommonJS-only feature while <code>process</code> global\nobject is shared with non-CommonJS environment. Its use within ECMAScript\nmodules is unsupported.</p>\n<p>It is deprecated in favor of <a href=\"modules.html#accessing-the-main-module\"><code>require.main</code></a>, because it serves the same\npurpose and is only available on CommonJS environment.</p>",
            "type": "module",
            "displayName": "DEP0138: `process.mainModule`",
            "apiType": "Documentation-only deprecation",
            "api": "process.mainModule"
        },
        {
            "name": "dep0139:_`process.umask()`_with_no_arguments",
            "desc": "<p>Type: Documentation-only</p>\n<p>Calling <code>process.umask()</code> with no argument causes the process-wide umask to be\nwritten twice. This introduces a race condition between threads, and is a\npotential security vulnerability. There is no safe, cross-platform alternative\nAPI.</p>",
            "type": "module",
            "displayName": "DEP0139: `process.umask()` with no arguments",
            "apiType": "Documentation-only deprecation",
            "api": "process.umask()"
        },
        {
            "name": "dep0140:_use_`request.destroy()`_instead_of_`request.abort()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>Use <a href=\"http.html#requestdestroyerror\"><code>request.destroy()</code></a> instead of <a href=\"http.html#requestabort\"><code>request.abort()</code></a>.</p>",
            "type": "module",
            "displayName": "DEP0140: Use `request.destroy()` instead of `request.abort()`",
            "apiType": "Documentation-only deprecation",
            "api": "request.destroy()` instead of `request.abort()"
        },
        {
            "name": "dep0141:_`repl.inputstream`_and_`repl.outputstream`",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>The <code>node:repl</code> module exported the input and output stream twice. Use <code>.input</code>\ninstead of <code>.inputStream</code> and <code>.output</code> instead of <code>.outputStream</code>.</p>",
            "type": "module",
            "displayName": "DEP0141: `repl.inputStream` and `repl.outputStream`",
            "apiType": "Documentation-only deprecation",
            "api": "repl.inputStream` and `repl.outputStream"
        },
        {
            "name": "dep0142:_`repl._builtinlibs`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <code>node:repl</code> module exports a <code>_builtinLibs</code> property that contains an array\nof built-in modules. It was incomplete so far and instead it's better to rely\nupon <code>require('node:module').builtinModules</code>.</p>",
            "type": "module",
            "displayName": "DEP0142: `repl._builtinLibs`",
            "apiType": "Documentation-only deprecation",
            "api": "repl._builtinLibs"
        },
        {
            "name": "dep0143:_`transform._transformstate`",
            "desc": "<p>Type: Runtime\n<code>Transform._transformState</code> will be removed in future versions where it is\nno longer required due to simplification of the implementation.</p>",
            "type": "module",
            "displayName": "DEP0143: `Transform._transformState`",
            "apiType": "Runtime deprecaton",
            "api": "Transform._transformState"
        },
        {
            "name": "dep0144:_`module.parent`",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>A CommonJS module can access the first module that required it using\n<code>module.parent</code>. This feature is deprecated because it does not work\nconsistently in the presence of ECMAScript modules and because it gives an\ninaccurate representation of the CommonJS module graph.</p>\n<p>Some modules use it to check if they are the entry point of the current process.\nInstead, it is recommended to compare <code>require.main</code> and <code>module</code>:</p>\n<pre><code class=\"language-js\">if (require.main === module) {\n  // Code section that will run only if current file is the entry point.\n}\n</code></pre>\n<p>When looking for the CommonJS modules that have required the current one,\n<code>require.cache</code> and <code>module.children</code> can be used:</p>\n<pre><code class=\"language-js\">const moduleParents = Object.values(require.cache)\n  .filter((m) => m.children.includes(module));\n</code></pre>",
            "type": "module",
            "displayName": "DEP0144: `module.parent`",
            "apiType": "Documentation-only deprecation",
            "api": "module.parent"
        },
        {
            "name": "dep0145:_`socket.buffersize`",
            "desc": "<p>Type: Documentation-only</p>\n<p><a href=\"net.html#socketbuffersize\"><code>socket.bufferSize</code></a> is just an alias for <a href=\"stream.html#writablewritablelength\"><code>writable.writableLength</code></a>.</p>",
            "type": "module",
            "displayName": "DEP0145: `socket.bufferSize`",
            "apiType": "Documentation-only deprecation",
            "api": "socket.bufferSize"
        },
        {
            "name": "dep0146:_`new_crypto.certificate()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"crypto.html#legacy-api\"><code>crypto.Certificate()</code> constructor</a> is deprecated. Use\n<a href=\"crypto.html#class-certificate\">static methods of <code>crypto.Certificate()</code></a> instead.</p>",
            "type": "module",
            "displayName": "DEP0146: `new crypto.Certificate()`",
            "apiType": "Documentation-only deprecation",
            "api": "new crypto.Certificate()"
        },
        {
            "name": "dep0147:_`fs.rmdir(path,_{_recursive:_true_})`",
            "desc": "<p>Type: Runtime</p>\n<p>In future versions of Node.js, <code>recursive</code> option will be ignored for\n<code>fs.rmdir</code>, <code>fs.rmdirSync</code>, and <code>fs.promises.rmdir</code>.</p>\n<p>Use <code>fs.rm(path, { recursive: true, force: true })</code>,\n<code>fs.rmSync(path, { recursive: true, force: true })</code> or\n<code>fs.promises.rm(path, { recursive: true, force: true })</code> instead.</p>",
            "type": "module",
            "displayName": "DEP0147: `fs.rmdir(path, { recursive: true })`",
            "apiType": "Runtime deprecaton",
            "api": "fs.rmdir(path, { recursive: true })"
        },
        {
            "name": "dep0148:_folder_mappings_in_`\"exports\"`_(trailing_`\"/\"`)",
            "desc": "<p>Type: Runtime</p>\n<p>Using a trailing <code>\"/\"</code> to define subpath folder mappings in the\n<a href=\"packages.html#subpath-exports\">subpath exports</a> or <a href=\"packages.html#subpath-imports\">subpath imports</a> fields is deprecated. Use\n<a href=\"packages.html#subpath-patterns\">subpath patterns</a> instead.</p>",
            "type": "module",
            "displayName": "DEP0148: Folder mappings in `\"exports\"` (trailing `\"/\"`)",
            "apiType": "Runtime deprecaton",
            "api": "\"exports\"` (trailing `\"/\""
        },
        {
            "name": "dep0149:_`http.incomingmessage#connection`",
            "desc": "<p>Type: Documentation-only.</p>\n<p>Prefer <a href=\"http.html#messagesocket\"><code>message.socket</code></a> over <a href=\"http.html#messageconnection\"><code>message.connection</code></a>.</p>",
            "type": "module",
            "displayName": "DEP0149: `http.IncomingMessage#connection`",
            "apiType": "Documentation-only deprecation",
            "api": "http.IncomingMessage#connection"
        },
        {
            "name": "dep0150:_changing_the_value_of_`process.config`",
            "desc": "<p>Type: End-of-Life</p>\n<p>The <code>process.config</code> property provides access to Node.js compile-time settings.\nHowever, the property is mutable and therefore subject to tampering. The ability\nto change the value will be removed in a future version of Node.js.</p>",
            "type": "module",
            "displayName": "DEP0150: Changing the value of `process.config`",
            "apiType": "End-of-Life",
            "api": "process.config"
        },
        {
            "name": "dep0151:_main_index_lookup_and_extension_searching",
            "desc": "<p>Type: Runtime</p>\n<p>Previously, <code>index.js</code> and extension searching lookups would apply to\n<code>import 'pkg'</code> main entry point resolution, even when resolving ES modules.</p>\n<p>With this deprecation, all ES module main entry point resolutions require\nan explicit <a href=\"packages.html#main-entry-point-export\"><code>\"exports\"</code> or <code>\"main\"</code> entry</a> with the exact file extension.</p>",
            "type": "module",
            "displayName": "DEP0151: Main index lookup and extension searching",
            "apiType": "Runtime deprecaton",
            "api": "DEP0151: Main index lookup and extension searchin"
        },
        {
            "name": "dep0152:_extension_performanceentry_properties",
            "desc": "<p>Type: Runtime</p>\n<p>The <code>'gc'</code>, <code>'http2'</code>, and <code>'http'</code> <a href=\"perf_hooks.html#class-performanceentry\" class=\"type\">&lt;PerformanceEntry&gt;</a> object types have\nadditional properties assigned to them that provide additional information.\nThese properties are now available within the standard <code>detail</code> property\nof the <code>PerformanceEntry</code> object. The existing accessors have been\ndeprecated and should no longer be used.</p>",
            "type": "module",
            "displayName": "DEP0152: Extension PerformanceEntry properties",
            "apiType": "Runtime deprecaton",
            "api": "DEP0152: Extension PerformanceEntry propertie"
        },
        {
            "name": "dep0153:_`dns.lookup`_and_`dnspromises.lookup`_options_type_coercion",
            "desc": "<p>Type: End-of-Life</p>\n<p>Using a non-nullish non-integer value for <code>family</code> option, a non-nullish\nnon-number value for <code>hints</code> option, a non-nullish non-boolean value for <code>all</code>\noption, or a non-nullish non-boolean value for <code>verbatim</code> option in\n<a href=\"dns.html#dnslookuphostname-options-callback\"><code>dns.lookup()</code></a> and <a href=\"dns.html#dnspromiseslookuphostname-options\"><code>dnsPromises.lookup()</code></a> throws an\n<code>ERR_INVALID_ARG_TYPE</code> error.</p>",
            "type": "module",
            "displayName": "DEP0153: `dns.lookup` and `dnsPromises.lookup` options type coercion",
            "apiType": "End-of-Life",
            "api": "dns.lookup` and `dnsPromises.lookup"
        },
        {
            "name": "dep0154:_rsa-pss_generate_key_pair_options",
            "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#--pending-deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>The <code>'hash'</code> and <code>'mgf1Hash'</code> options are replaced with <code>'hashAlgorithm'</code>\nand <code>'mgf1HashAlgorithm'</code>.</p>",
            "type": "module",
            "displayName": "DEP0154: RSA-PSS generate key pair options",
            "apiType": "Documentation-only deprecation",
            "api": "DEP0154: RSA-PSS generate key pair option"
        },
        {
            "name": "dep0155:_trailing_slashes_in_pattern_specifier_resolutions",
            "desc": "<p>Type: Runtime</p>\n<p>The remapping of specifiers ending in <code>\"/\"</code> like <code>import 'pkg/x/'</code> is deprecated\nfor package <code>\"exports\"</code> and <code>\"imports\"</code> pattern resolutions.</p>",
            "type": "module",
            "displayName": "DEP0155: Trailing slashes in pattern specifier resolutions",
            "apiType": "Runtime deprecaton",
            "api": "DEP0155: Trailing slashes in pattern specifier resolution"
        },
        {
            "name": "dep0156:_`.aborted`_property_and_`'abort'`,_`'aborted'`_event_in_`http`",
            "desc": "<p>Type: Documentation-only</p>\n<p>Move to <a href=\"stream.html#stream\" class=\"type\">&lt;Stream&gt;</a> API instead, as the <a href=\"http.html#class-httpclientrequest\"><code>http.ClientRequest</code></a>,\n<a href=\"http.html#class-httpserverresponse\"><code>http.ServerResponse</code></a>, and <a href=\"http.html#class-httpincomingmessage\"><code>http.IncomingMessage</code></a> are all stream-based.\nCheck <code>stream.destroyed</code> instead of the <code>.aborted</code> property, and listen for\n<code>'close'</code> instead of <code>'abort'</code>, <code>'aborted'</code> event.</p>\n<p>The <code>.aborted</code> property and <code>'abort'</code> event are only useful for detecting\n<code>.abort()</code> calls. For closing a request early, use the Stream\n<code>.destroy([error])</code> then check the <code>.destroyed</code> property and <code>'close'</code> event\nshould have the same effect. The receiving end should also check the\n<a href=\"stream.html#readablereadableended\"><code>readable.readableEnded</code></a> value on <a href=\"http.html#class-httpincomingmessage\"><code>http.IncomingMessage</code></a> to get whether\nit was an aborted or graceful destroy.</p>",
            "type": "module",
            "displayName": "DEP0156: `.aborted` property and `'abort'`, `'aborted'` event in `http`",
            "apiType": "Documentation-only deprecation",
            "api": ".aborted` property and `'abort'`, `'aborted'` event in `http"
        },
        {
            "name": "dep0157:_thenable_support_in_streams",
            "desc": "<p>Type: End-of-Life</p>\n<p>An undocumented feature of Node.js streams was to support thenables in\nimplementation methods. This is now deprecated, use callbacks instead and avoid\nuse of async function for streams implementation methods.</p>\n<p>This feature caused users to encounter unexpected problems where the user\nimplements the function in callback style but uses e.g. an async method which\nwould cause an error since mixing promise and callback semantics is not valid.</p>\n<pre><code class=\"language-js\">const w = new Writable({\n  async final(callback) {\n    await someOp();\n    callback();\n  },\n});\n</code></pre>",
            "type": "module",
            "displayName": "DEP0157: Thenable support in streams",
            "apiType": "End-of-Life",
            "api": "DEP0157: Thenable support in stream"
        },
        {
            "name": "dep0158:_`buffer.slice(start,_end)`",
            "desc": "<p>Type: Documentation-only</p>\n<p>This method was deprecated because it is not compatible with\n<code>Uint8Array.prototype.slice()</code>, which is a superclass of <code>Buffer</code>.</p>\n<p>Use <a href=\"buffer.html#bufsubarraystart-end\"><code>buffer.subarray</code></a> which does the same thing instead.</p>",
            "type": "module",
            "displayName": "DEP0158: `buffer.slice(start, end)`",
            "apiType": "Documentation-only deprecation",
            "api": "buffer.slice(start, end)"
        },
        {
            "name": "dep0159:_`err_invalid_callback`",
            "desc": "<p>Type: End-of-Life</p>\n<p>This error code was removed due to adding more confusion to\nthe errors used for value type validation.</p>",
            "type": "module",
            "displayName": "DEP0159: `ERR_INVALID_CALLBACK`",
            "apiType": "End-of-Life",
            "api": "ERR_INVALID_CALLBACK"
        },
        {
            "name": "dep0160:_`process.on('multipleresolves',_handler)`",
            "desc": "<p>Type: Runtime.</p>\n<p>This event was deprecated because it did not work with V8 promise combinators\nwhich diminished its usefulness.</p>",
            "type": "module",
            "displayName": "DEP0160: `process.on('multipleResolves', handler)`",
            "apiType": "Runtime deprecaton",
            "api": "process.on('multipleResolves', handler)"
        },
        {
            "name": "dep0161:_`process._getactiverequests()`_and_`process._getactivehandles()`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <code>process._getActiveHandles()</code> and <code>process._getActiveRequests()</code>\nfunctions are not intended for public use and can be removed in future\nreleases.</p>\n<p>Use <a href=\"process.html#processgetactiveresourcesinfo\"><code>process.getActiveResourcesInfo()</code></a> to get a list of types of active\nresources and not the actual references.</p>",
            "type": "module",
            "displayName": "DEP0161: `process._getActiveRequests()` and `process._getActiveHandles()`",
            "apiType": "Documentation-only deprecation",
            "api": "process._getActiveRequests()` and `process._getActiveHandles()"
        },
        {
            "name": "dep0162:_`fs.write()`,_`fs.writefilesync()`_coercion_to_string",
            "desc": "<p>Type: End-of-Life</p>\n<p>Implicit coercion of objects with own <code>toString</code> property, passed as second\nparameter in <a href=\"fs.html#fswritefd-buffer-offset-length-position-callback\"><code>fs.write()</code></a>, <a href=\"fs.html#fswritefilefile-data-options-callback\"><code>fs.writeFile()</code></a>, <a href=\"fs.html#fsappendfilepath-data-options-callback\"><code>fs.appendFile()</code></a>,\n<a href=\"fs.html#fswritefilesyncfile-data-options\"><code>fs.writeFileSync()</code></a>, and <a href=\"fs.html#fsappendfilesyncpath-data-options\"><code>fs.appendFileSync()</code></a> is deprecated.\nConvert them to primitive strings.</p>",
            "type": "module",
            "displayName": "DEP0162: `fs.write()`, `fs.writeFileSync()` coercion to string",
            "apiType": "End-of-Life",
            "api": "fs.write()`, `fs.writeFileSync()"
        },
        {
            "name": "dep0163:_`channel.subscribe(onmessage)`,_`channel.unsubscribe(onmessage)`",
            "desc": "<p>Type: Documentation-only</p>\n<p>These methods were deprecated because they can be used in a way which does not\nhold the channel reference alive long enough to receive the events.</p>\n<p>Use <a href=\"diagnostics_channel.html#diagnostics_channelsubscribename-onmessage\"><code>diagnostics_channel.subscribe(name, onMessage)</code></a> or\n<a href=\"diagnostics_channel.html#diagnostics_channelunsubscribename-onmessage\"><code>diagnostics_channel.unsubscribe(name, onMessage)</code></a> which does the same\nthing instead.</p>",
            "type": "module",
            "displayName": "DEP0163: `channel.subscribe(onMessage)`, `channel.unsubscribe(onMessage)`",
            "apiType": "Documentation-only deprecation",
            "api": "channel.subscribe(onMessage)`, `channel.unsubscribe(onMessage)"
        },
        {
            "name": "dep0164:_`process.exit(code)`,_`process.exitcode`_coercion_to_integer",
            "desc": "<p>Type: Runtime</p>\n<p>Values other than <code>undefined</code>, <code>null</code>, integer numbers, and integer strings\n(e.g., <code>'1'</code>) are deprecated as value for the <code>code</code> parameter in\n<a href=\"process.html#processexitcode\"><code>process.exit()</code></a> and as value to assign to <a href=\"process.html#processexitcode_1\"><code>process.exitCode</code></a>.</p>",
            "type": "module",
            "displayName": "DEP0164: `process.exit(code)`, `process.exitCode` coercion to integer",
            "apiType": "Runtime deprecaton",
            "api": "process.exit(code)`, `process.exitCode"
        },
        {
            "name": "dep0165:_`--trace-atomics-wait`",
            "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"cli.html#--trace-atomics-wait\"><code>--trace-atomics-wait</code></a> flag is deprecated.</p>",
            "type": "module",
            "displayName": "DEP0165: `--trace-atomics-wait`",
            "apiType": "Documentation-only deprecation",
            "api": "--trace-atomics-wait"
        },
        {
            "name": "dep0166:_double_slashes_in_imports_and_exports_targets",
            "desc": "<p>Type: Runtime</p>\n<p>Package imports and exports targets mapping into paths including a double slash\n(of <em>\"/\"</em> or <em>\"\\\"</em>) are deprecated and will fail with a resolution validation\nerror in a future release. This same deprecation also applies to pattern matches\nstarting or ending in a slash.</p>",
            "type": "module",
            "displayName": "DEP0166: Double slashes in imports and exports targets",
            "apiType": "Runtime deprecaton",
            "api": "DEP0166: Double slashes in imports and exports target"
        },
        {
            "name": "dep0167:_weak_`diffiehellmangroup`_instances_(`modp1`,_`modp2`,_`modp5`)",
            "desc": "<p>Type: Documentation-only</p>\n<p>The well-known MODP groups <code>modp1</code>, <code>modp2</code>, and <code>modp5</code> are deprecated because\nthey are not secure against practical attacks. See <a href=\"https://www.rfc-editor.org/rfc/rfc8247#section-2.4\">RFC 8247 Section 2.4</a> for\ndetails.</p>\n<p>These groups might be removed in future versions of Node.js. Applications that\nrely on these groups should evaluate using stronger MODP groups instead.</p>",
            "type": "module",
            "displayName": "DEP0167: Weak `DiffieHellmanGroup` instances (`modp1`, `modp2`, `modp5`)",
            "apiType": "Documentation-only deprecation",
            "api": "DiffieHellmanGroup` instances (`modp1`, `modp2`, `modp5"
        },
        {
            "name": "dep0168:_unhandled_exception_in_node-api_callbacks",
            "desc": "<p>Type: Runtime</p>\n<p>The implicit suppression of uncaught exceptions in Node-API callbacks is now\ndeprecated.</p>\n<p>Set the flag <a href=\"cli.html#--force-node-api-uncaught-exceptions-policy\"><code>--force-node-api-uncaught-exceptions-policy</code></a> to force Node.js\nto emit an <a href=\"process.html#event-uncaughtexception\"><code>'uncaughtException'</code></a> event if the exception is not handled in\nNode-API callbacks.</p>",
            "type": "module",
            "displayName": "DEP0168: Unhandled exception in Node-API callbacks",
            "apiType": "Runtime deprecaton",
            "api": "DEP0168: Unhandled exception in Node-API callback"
        },
        {
            "name": "dep0169:_insecure_url.parse()",
            "desc": "<p>Type: Documentation-only</p>\n<p><a href=\"url.html#urlparseurlstring-parsequerystring-slashesdenotehost\"><code>url.parse()</code></a> behavior is not standardized and prone to errors that\nhave security implications. Use the <a href=\"url.html#the-whatwg-url-api\">WHATWG URL API</a> instead. CVEs are not\nissued for <code>url.parse()</code> vulnerabilities.</p>",
            "type": "module",
            "displayName": "DEP0169: Insecure url.parse()",
            "apiType": "Documentation-only deprecation",
            "api": "DEP0169: Insecure url.parse("
        },
        {
            "name": "dep0170:_invalid_port_when_using_`url.parse()`",
            "desc": "<p>Type: Documentation-only</p>\n<p><a href=\"url.html#urlparseurlstring-parsequerystring-slashesdenotehost\"><code>url.parse()</code></a> accepts URLs with ports that are not numbers. This behavior\nmight result in host name spoofing with unexpected input. These URLs will throw\nan error in future versions of Node.js, as the <a href=\"url.html#the-whatwg-url-api\">WHATWG URL API</a> does already.</p>",
            "type": "module",
            "displayName": "DEP0170: Invalid port when using `url.parse()`",
            "apiType": "Documentation-only deprecation",
            "api": "url.parse()"
        },
        {
            "name": "dep0171:_setters_for_`http.incomingmessage`_headers_and_trailers",
            "desc": "<p>Type: Documentation-only</p>\n<p>In a future version of Node.js, <a href=\"http.html#messageheaders\"><code>message.headers</code></a>,\n<a href=\"http.html#messageheadersdistinct\"><code>message.headersDistinct</code></a>, <a href=\"http.html#messagetrailers\"><code>message.trailers</code></a>, and\n<a href=\"http.html#messagetrailersdistinct\"><code>message.trailersDistinct</code></a> will be read-only.</p>",
            "type": "module",
            "displayName": "DEP0171: Setters for `http.IncomingMessage` headers and trailers",
            "apiType": "Documentation-only deprecation",
            "api": "http.IncomingMessage"
        }
    ]
}